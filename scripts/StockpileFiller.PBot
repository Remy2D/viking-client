// Used to make cloth from flax
// Best way to prevent synchronization issues between client and server is to keep the state of what player should be doing next, what items should be in inventory, etc. client side, and then wait until the state told by server changes to this state
// Made by Purus Cor to demonstrate usage of PBot API
// For more information about API, join Purus Pasta discord
// To suggest features into API, suggest them in discord
const PBotUtils = Java.type('haven.purus.pbot.PBotUtils');
const PBotGobAPI = Java.type('haven.purus.pbot.PBotGobAPI');
const PBotWindowAPI = Java.type('haven.purus.pbot.PBotWindowAPI');
const window = PBotUtils.PBotWindow("Cloth Maker", 200, 200, ScriptID);
let stop = false;

shouldStop = () => {
	return stop;
};

javaListToArray = (javalist) => {
	const ret = [];
	for(let i=0; i<javalist.size(); i++)
		ret.push(javalist.get(i));
	return ret;
};

const startBtn = () => {
	PBotUtils.sysMsg("Starting the stockpiler bot...");
	PBotUtils.sysMsg("Click item in inventory!");
	const itm = PBotUtils.selectItem();
	PBotUtils.sysMsg("Alt+click item in ground!");
	const gndRes = PBotGobAPI.selectGob().getResname();
	PBotUtils.sysMsg("Alt+click stockpile!");
	const pleRes = PBotGobAPI.selectGob().getResname();
	PBotUtils.sysMsg("Select area with stockpiles!");
	PBotUtils.selectArea();
	const stockpiles = javaListToArray(PBotUtils.gobsInArea(PBotUtils.getSelectedAreaA(), PBotUtils.getSelectedAreaB()));
	while(!shouldStop()) {
		const gob = PBotGobAPI.findGobByNames(1000, [gndRes]);
		console.log(PBotUtils.playerInventory().freeSpaceForItem(itm));
		if(gob == null ||Â PBotUtils.playerInventory().freeSpaceForItem(itm) == null) { // to stockpiles
			let itmInInv = javaListToArray(PBotUtils.playerInventory().getInventoryItemsByResnames([itm.getResname()])).length;
			while(itmInInv > 0) {
				if(stockpiles.length == 0) {
					stop = true;
					PBotUtils.sysMsg("Ran out of free stockpiles!");
					break;
				}
				PBotUtils.pfRightClick(stockpiles[0], 0);
				PBotWindowAPI.waitForWindow("Stockpile", 1000000);
				const capacity = PBotWindowAPI.getStockpileTotalCapacity();
				const used = PBotWindowAPI.getStockpileUsedCapacity();
				const count = Math.min(capacity-used, itmInInv);
				PBotWindowAPI.putItemFromInventoryToStockpile(count);
				if(count + used === capacity) {
					stockpiles.shift();
					continue;
				}
				itmInInv -= count;
				while(PBotUtils.playerInventory().getInventoryItemsByNames([itm.getResname()]).size() != itmInInv) {
					PBotUtils.sleep(25);
				}
			}
			console.log(itmInInv);
			if(gob == null)
				break;
		}
		if(shouldStop())
			break;
		const slots = PBotUtils.playerInventory().freeSlotsInv();
		gob.pfClick(3, 0);
		while(PBotGobAPI.findGobById(gob.getGobId()) != null) {
			PBotUtils.sleep(25);
		}
		while(PBotUtils.playerInventory().freeSlotsInv() === slots) {
			PBotUtils.sleep(25);
		}
	}
	PBotUtils.sysMsg("Stockpile filler finished!");
	
	window.closeWindow();
};
startBtn();
